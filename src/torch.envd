# syntax=v1

def torch(version="latest", dev=True,  cuda_version="118"):
    """
    设置 torch 镜像
    """
    version_str = "" if version =="latest" else "%s_" % version
    env_str = "dev" if dev else "runtime"
    torch_image="hgfkeep/torch:%scu%s_%s" % (version_str, cuda_version, env_str)
    base(image=torch_image, dev=dev)


def install_torch(version="latest", py_version="3.11", dev=True, cuda_version='118', cuda_dev=False):
    install.python(version=py_version)  
    if dev:
        install.conda()
        install.apt_packages(name=["git", "build-essential"])
    
    cuda_env = "devel" if cuda_dev else "runtime" 
    cuda_version = "11.8.0" if version == "118" else "12.1.0"
    # 不需要编译nvidia cuda 相关的东西，例如nvcc，仅需要runtime环境的就可以了
    base(image="nvidia/cuda:{}-cudnn8-{}-ubuntu22.04".format(cuda_version, cuda_env), dev=dev)
    # 安装监控工具
    install.python_packages(name = ["nvitop"])

    v_str = ""
    if version == None or version == "latest":
        torch_latest(cuda_version)
    elif version =="2.1.2":
        torch_2_1_2(cuda_version)
    else:
        print("not supported torch verison:%s" % version)

def torch_latest(cuda_version='118'):
    cmd="pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu%s" % cuda_version
    run(commands=[cmd])


def torch_2_1_2(cuda_version='118'):
    cmd="pip install torch==2.1.2 torchvision==0.16.2 torchaudio==2.1.2 --index-url https://download.pytorch.org/whl/cu%s" % cuda_version
    run(commands=[cmd])

def torch_2_2_2(cuda_version='118'):
    cmd="pip install torch==2.2.0 torchvision==0.17.0 torchaudio==2.2.0 --index-url https://download.pytorch.org/whl/cu%s" % cuda_version
    run(commands=[cmd])

def build():
    torch(version="2.1.2", dev=True, cuda_version="118")
